from telegram import KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler
from telegram.ext.filters import Filters
from bot.data_modules.msm_share import MSMShare
from bot.data_modules.userfavouriteshares import UserFavouriteShares
from bot.data_modules.cbrates import CBRates
from bot.utils.date import Date

import logging
import bot.config as config

class Bot:
    def __init__(self, token) -> None:
        logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                            level=logging.INFO)
        
        self.logger = logging.getLogger()
        self.updater = Updater(token=token, use_context=True)
        self.dispatcher = self.updater.dispatcher
        
        #Setting handlers
        message_handler = MessageHandler(Filters.text & (~Filters.command), 
                                         self.handle_message)
        
        sticker_handler = MessageHandler(Filters.sticker & (~Filters.command & ~Filters.text), 
                                         self.handle_sticker)
        
        start_handler = CommandHandler("start", self.handle_start)
        get_rates_handler = CommandHandler("getrates", self.handle_get_rates, pass_args=True)
        get_favourite_handler = CommandHandler("getfavourite", self.handle_get_favourite)
        clear_favourite = CommandHandler("clearfavourite", self.handle_clear_favourite)
        
        #Setting handlers
        self.dispatcher.add_handler(start_handler)
        self.dispatcher.add_handler(message_handler)
        self.dispatcher.add_handler(sticker_handler)
        self.dispatcher.add_handler(get_rates_handler)
        self.dispatcher.add_handler(get_favourite_handler)
        self.dispatcher.add_handler(clear_favourite)
    
    def start(self) -> None:
        self.updater.start_polling()
    
    def handle_start(self, update, context) -> None:
        """Handles "/start" command
        
        """
        chat_id = update.effective_chat.id
        first_name = update.effective_chat.first_name
        full_name = update.effective_chat.full_name
        bot_name = context.bot.get_me().first_name
        
        path = config.START_STICKER_PATH
        
        if path: 
            sti = open(path, 'rb')
            context.bot.send_sticker(chat_id, sti)
        
        message = f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫{f', {first_name}'}!\n\n–Ø - {bot_name}, –±–∏—Ä–∂–µ–≤–æ–π –±–æ—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–º—É –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π –∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏.\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ü–∏–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π \"Apple\", \"Google\" –∏–ª–∏ \"Amazon\".\n\n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§ –∫ —Ä—É–±–ª—é, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É \"/getrates\", –∏–ª–∏ –≤—ã–±—Ä–∞–≤ –µ—ë –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –Ω–∞ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ \"/getrates –Ω—É–∂–Ω–∞—è –¥–∞—Ç–∞\"\n–í–æ—Ç –ø–∞—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤:\n/getrates 24.02.2022\n/getrates 20.8.2020.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ü–µ–Ω–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∞–∫—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë <a href=\"https://ru.wikipedia.org/wiki/%D0%A2%D0%B8%D0%BA%D0%B5%D1%80\">—Ç–∏–∫–µ—Ä</a> –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, <b>\"YNDX\"</b> –∏–ª–∏ <b>\"GaZp\"</b>.\n\n–ï—â—ë –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–∫—Ü–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏, –∞ –∑–∞—Ç–µ–º, –Ω–∞ –ø–æ—è–≤–∏–≤—à–µ–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤—ã–±–µ—Ä–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ [—Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏]\".\n\n–ó–∞—Ç–µ–º, –∫–æ–≥–¥–∞ –í—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π, –≤–≤–µ–¥–∏—Ç–µ \n\"/getfavourite\". –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \n\"/clearfavourite\" –∏ —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
        
        context.bot.send_message(chat_id, message, parse_mode="html", disable_web_page_preview=True)
        
        self.logger.info(f"{full_name} selected start command")

    def handle_get_favourite(self, update, context) -> None:
        """Handles "/getfavourite" command
        
        """
        chat_id = update.effective_chat.id
        full_name = update.effective_chat.full_name
        
        message = "–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π:\n"
        log_message = f"{full_name} required the favourite shares list"
        
        favourite_shares = UserFavouriteShares(chat_id).get_favourite_shares()
        
        if not favourite_shares:
            message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–πüòÖ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ticker –∞–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä \"YNDX\"."
        
        for ticker in favourite_shares:
            share = MSMShare(ticker)
            message += f"{ticker} ({share.get_share_name()}): <b>{share.get_share_price()}</b>‚ÇΩ\n"
            
        self.logger.info(log_message)
        
        context.bot.send_message(chat_id, message, parse_mode="html")
                        
    def handle_clear_favourite(self, update, context) -> None:
        """Handles "/clearfavourite" command

        """
        chat_id = update.effective_chat.id
        full_name = update.effective_chat.full_name
        
        log_message = f"{full_name} cleard favourite list"
        
        UserFavouriteShares(chat_id).clear_favourite_shares()
        
        self.logger.info(log_message)
        
            
        context.bot.send_message(chat_id, f"–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π –±—ã–ª –æ—á–∏—â–µ–Ω.")

    def handle_get_rates(self, update, context) -> None:
        """Handles "/getrates" command

        """
        chat_id = update.effective_chat.id
        full_name = update.effective_chat.full_name 
        
        args = context.args    
        
        NEEDED_RATES = config.VALUTES
                
        if not args:
            date = Date().get_next_day_date()
            
            CB_exchange_rates = CBRates((date.day, date.month, date.year))
            
            previous_CB_exchange_rates = CB_exchange_rates.get_previous_exchange_rates()

            message = "üè¶\n–ö—É—Ä—Å—ã –¶–ë –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é:\n"
            
            current_data = CB_exchange_rates.data
            previous_data = previous_CB_exchange_rates.data
            
            for key in NEEDED_RATES:
                if current_data[key]['price'] > previous_data[key]['price']:
                    sign = '‚è´'
                elif current_data[key]['price'] < previous_data[key]['price']:
                    sign = '‚è¨'
                else:
                    sign = ''
                    
                message += f"{current_data[key]['nominal']} {current_data[key]['name'][0].lower() + current_data[key]['name'][1:]}:\n<b>{current_data[key]['price']}‚ÇΩ</b>{sign}\n"
                
            log_message = f"{full_name} required CB rates"
            
            return       
        
        try:
            
            date = args[0].split('.')
            
            rates = CBRates(date=(date[0], date[1], date[2])).data
            
            date = '.'.join(date)
            
            message = f"üè¶\n–ö—É—Ä—Å –¶–ë –≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é –Ω–∞ {date}:\n"
            for key in NEEDED_RATES:
                try:
                    message += f"{rates[key]['nominal']} {rates[key]['name'][0].lower() + rates[key]['name'][1:]}:\n<b>{rates[key]['price']}‚ÇΩ</b>\n"
                except KeyError:
                    continue
                
            log_message = f"{full_name} required CBRates with next date: {date}"
        
        except (ValueError, IndexError):
            message = "–ü–æ—Ö–æ–∂–µ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É —Å –∫–æ–º–∞–Ω–¥–æ–π /getrates.\n\n–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥:\n/getrates –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥.\n\n–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n/getrates 24.02.2022\n/getrates 20.8.2020"
            log_message = f"{full_name} tried to require CBRates, but the date was incorrect. Input: {date}"
                        
        self.logger.info(log_message)
        context.bot.send_message(chat_id, message, parse_mode="html")
                
    def handle_message(self, update, context) -> None:
        """Handles any text message

        """
        chat_id = update.effective_chat.id
        full_name = update.effective_chat.full_name 
        text = update.message.text
        
        reply_keyboard = [[]]
            
        if "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:" in text:
            ticker = f"{text[-4]}{text[-3]}{text[-2]}{text[-1]}"
            userFavouriteShares = UserFavouriteShares(chat_id)
            
            if not ticker in userFavouriteShares.get_favourite_shares():
                userFavouriteShares.add_favourite_share(ticker)
                message = f"–ê–∫—Ü–∏—è \"{ticker}\" –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \"/getfavourite\", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π."
                log_message = f"{full_name} added {ticker} share to the favourite list"

                return 
            
            message = f"–ê–∫—Ü–∏—è \"{ticker}\" —É–∂–µ –≤ –í–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–πü§∑‚Äç‚ôÇÔ∏è"
            log_message = f"{full_name} tried to add {ticker} to the favourite list, but the share is already there"
            
            return 
            
        if "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:" in text:
            #Here we connect to the DataBase and remove the share from the user's favourite list
            ticker = f"{text[-4]}{text[-3]}{text[-2]}{text[-1]}"
            userFavouriteShares = UserFavouriteShares(chat_id)
            
            if ticker in userFavouriteShares.get_favourite_shares():  
                UserFavouriteShares(chat_id).remove_from_favourite_shares(ticker)
                message = f"–ê–∫—Ü–∏—è \"{ticker}\" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \"/getfavourite\", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π."
                log_message = f"{full_name} removed {ticker} share from the favourite list"

                return 
                
            message = f"–ê–∫—Ü–∏–∏ \"{ticker}\ –∏ —Ç–∞–∫ –Ω–µ—Ç –≤ –í–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–πü§∑‚Äç‚ôÇÔ∏è"
            log_message = f"{full_name} tried to remove {ticker} share from the favourite list, but it was alredy not there"
            
            return
                
        
        try:
            #Here we a Moscow Stock Market share and get its price.
            #If the share is in the user's favourite list, we change it either "Add to favourite shares list" or "Remove from favourite shares list"
            share = MSMShare(text)
            price = share.get_share_price()
            share_name = share.get_share_name()
                
            log_message = f"{full_name} required {text} share, its price is {price} RUB"
            message = f"–ü–æ –¥–∞–Ω–Ω—ã–º –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π {share_name} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{price}</b>‚ÇΩ."
                
            reply_keyboard = [[KeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {text.upper()}")]] if not text.upper() in UserFavouriteShares(chat_id).get_favourite_shares() else [[KeyboardButton(f"–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {text.upper()}")]]
        
        except ValueError:
            message = "–£–ø—Å... –ü–æ—Ö–æ–∂–µ —Ç–∞–∫–æ–π –∞–∫—Ü–∏–∏ –Ω–µ—Ç..."
            log_message = f"{full_name} required non-existent share. Entered value: {text}"
            
        self.logger.info(log_message)
        
        context.bot.send_message(chat_id, message, parse_mode="html", reply_markup=ReplyKeyboardMarkup(keyboard=(reply_keyboard or ""), one_time_keyboard=True, resize_keyboard=True))

    def handle_sticker(self, update, context) -> None:
        """Handles any sticker

        """
        chat_id = update.effective_chat.id
        first_name = update.effective_chat.first_name
        last_name = update.effective_chat.last_name or ""
        
        log_message = f"{first_name} {last_name} sent a sticker"
        
        self.logger.info(log_message)
        
        context.bot.send_message(chat_id, '–°—Ç–∏–∫–µ—Ä? –õ–∞–¥–Ω–æ.')